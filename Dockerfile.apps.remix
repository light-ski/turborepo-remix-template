# base node image
FROM node:bullseye-slim as base

# Install openssl for Prisma
RUN apt-get update && apt-get install -y openssl

# == Builder
FROM base as builder
RUN mkdir /app
WORKDIR /app
RUN npm install -g turbo
COPY . .
RUN turbo prune --scope=@lightski/remix --docker

# == Installer
FROM base as installer
RUN mkdir /app
WORKDIR /app
# Copy package.json over, install dependencies
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/package-lock.json ./package-lock.json
RUN npm clean-install
# Build the project
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json
RUN npx turbo run build --filter=@lightski/remix

# == Runner
FROM base as runner
WORKDIR /app
ENV NODE_ENV=production
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 remix
USER remix

COPY --from=installer --chown=remix:nodejs /app/ ./

WORKDIR /app

CMD ["npm", "run", "start", "--workspace=@lightski/remix"]


## Below is the default Dockerfile created when you deploy an app to Fly.io
## To get the Dockerfile above, we combined bits of the file below with the
## Turborepo example Dockerfile available here:
## https://github.com/vercel/turbo/blob/main/examples/with-docker/apps/web/Dockerfile

# RUN npm install -g turbo

# # Install all node_modules, including dev dependencies
# FROM base as deps

# RUN mkdir /app
# WORKDIR /app

# # Updated for Turborepo
# ADD package.json package-lock.json ./
# ADD apps/web/package.json apps/web/package-lock.json ./
# ADD packages/*/package.json packages/*/package-lock.json ./
# RUN npm install --production=false

# # Setup production node_modules
# FROM base as production-deps

# RUN mkdir /app
# WORKDIR /app

# COPY --from=deps /app/node_modules /app/node_modules
# # Updated for Turborepo
# ADD package.json ./
# ADD apps/web/package.json ./
# ADD packages/*/package.json ./
# RUN npm prune --production

# # Build the app
# FROM base as build

# ENV NODE_ENV=production

# RUN mkdir /app
# WORKDIR /app

# COPY --from=deps /app/node_modules /app/node_modules
# COPY --from=deps /app/package.json /app/package.json
# COPY --from=deps /app/package-lock.json /app/package-lock.json
# COPY --from=deps /app/apps/web/package.json /app/apps/web/package.json
# COPY --from=deps /app/apps/web/package-lock.json /app/apps/web/package-lock.json
# COPY --from=deps /app/packages/*/package.json /app/packages/*/package.json
# COPY --from=deps /app/packages/*/package-lock.json /app/packages/*/package-lock.json

# # If we're using Prisma, uncomment to cache the prisma schema
# # ADD prisma .
# # RUN npx prisma generate

# ADD . .
# # Updated for Turborepo
# RUN turbo run build --filter=web

# # Finally, build the production image with minimal footprint
# FROM base

# ENV NODE_ENV=production

# RUN mkdir /app
# WORKDIR /app

# COPY --from=production-deps /app/node_modules /app/node_modules

# # Uncomment if using Prisma
# # COPY --from=build /app/node_modules/.prisma /app/node_modules/.prisma

# COPY --from=build /app/build /app/build
# COPY --from=build /app/public /app/public
# ADD . .

# CMD ["npm", "run", "start"]
